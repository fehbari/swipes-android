package com.swipesapp.android.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.swipesapp.android.db.Attachment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTACHMENT.
*/
public class AttachmentDao extends AbstractDao<Attachment, Long> {

    public static final String TABLENAME = "ATTACHMENT";

    /**
     * Properties of entity Attachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identifier = new Property(1, String.class, "identifier", false, "IDENTIFIER");
        public final static Property Service = new Property(2, String.class, "service", false, "SERVICE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Sync = new Property(4, Boolean.class, "sync", false, "SYNC");
        public final static Property TaskId = new Property(5, long.class, "taskId", false, "TASK_ID");
    };

    private Query<Attachment> task_AttachmentsQuery;

    public AttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public AttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTACHMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IDENTIFIER' TEXT," + // 1: identifier
                "'SERVICE' TEXT," + // 2: service
                "'TITLE' TEXT," + // 3: title
                "'SYNC' INTEGER," + // 4: sync
                "'TASK_ID' INTEGER NOT NULL );"); // 5: taskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTACHMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(2, identifier);
        }
 
        String service = entity.getService();
        if (service != null) {
            stmt.bindString(3, service);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Boolean sync = entity.getSync();
        if (sync != null) {
            stmt.bindLong(5, sync ? 1l: 0l);
        }
        stmt.bindLong(6, entity.getTaskId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attachment readEntity(Cursor cursor, int offset) {
        Attachment entity = new Attachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identifier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // service
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // sync
            cursor.getLong(offset + 5) // taskId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setService(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSync(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTaskId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachments" to-many relationship of Task. */
    public List<Attachment> _queryTask_Attachments(long taskId) {
        synchronized (this) {
            if (task_AttachmentsQuery == null) {
                QueryBuilder<Attachment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_AttachmentsQuery = queryBuilder.build();
            }
        }
        Query<Attachment> query = task_AttachmentsQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
